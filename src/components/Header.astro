---
const links = [
  { link: "#home", text: "Inicio" },
  { link: "#experience", text: "Experiencia" },
  { link: "#project", text: "Proyectos" },
  { link: "#contact", text: "Contactame" },
];
---

<header class="header">
  <nav class="nav">
    <ul class="list">
      {
        links.map(({ link, text }) => (
          <li class="list__element">
            <a href={link} class="list__link">
              {text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
  <div id="line" class="header__line"></div>
  <div id="line__hover" class="header__line header__line--bg"></div>
</header>

<style lang="scss">
  .header {
    position: fixed;
    width: 100%;
    display: flex;
    align-items: end;
    justify-content: end;
    z-index: 1;

    @media (width <= 1000px) {
      justify-content: center;
    }

    &__line {
      --width: 0;
      position: absolute;
      width: var(--width);
      left: var(--left);
      height: 2px;
      background-color: #fff;
      transition: all 0.3s;

      &--bg {
        background-color: #ffffff34;
      }
    }
  }

  .nav {
    padding-top: 3rem;
    padding-right: 3rem;
    @media (width <= 1000px) {
      padding-right: 0;
    }
  }

  .list {
    display: flex;

    &.active {
      & > .list__element {

        & > .list__link {
          background-color: rgba(0, 0, 0, 0.7);
        }
      }
    }

    &__element {
      overflow: hidden;
      &:first-of-type {
        border-top-left-radius: 10px;
      }
      
      &:last-of-type{
        border-top-right-radius: 10px;
      }
    }

    &__link {
      padding: 0.8em 1rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.22);
      backdrop-filter: blur(2px);
      font-weight: bold;
      transition: background-color 0.35s;
    }
  }
</style>

<script>
  const list_link = document.querySelectorAll(".list__link");
  const line = document.querySelector("#line") as HTMLElement;
  const lineHover = document.querySelector("#line__hover") as HTMLElement;

  const getBoundingClientByHash = () => {
    const { hash } = window.location;
    const link_actual = document.querySelector(`a[href="${hash}"]`);
    return (
      link_actual?.getBoundingClientRect() ??
      list_link[0].getBoundingClientRect()
    );
  };

  const setStyleProperty = (
    element: HTMLElement,
    width: number,
    left: number
  ) => {
    element.style.setProperty("--width", `${width}px`);
    element.style.setProperty("--left", `${left}px`);
  };

  if (window.location.hash) {
    const { width, left } = getBoundingClientByHash();
    setStyleProperty(line, width, left);
    setStyleProperty(lineHover, width, left);
  } else {
    const { width, left } = list_link[0].getBoundingClientRect();
    setStyleProperty(line, width, left);
    setStyleProperty(lineHover, width, left);
  }

  list_link.forEach((element) => {
    element.addEventListener("mouseover", () => {
      const { width, left } = element.getBoundingClientRect();
      setStyleProperty(lineHover, width, left);
    });
  });

  list_link.forEach((element) => {
    element.addEventListener("mouseout", () => {
      const { width, left } = getBoundingClientByHash();
      setStyleProperty(lineHover, width, left);
    });
  });

  window.addEventListener("hashchange", () => {
    const { width, left } = getBoundingClientByHash();
    setStyleProperty(line, width, left);
  });

  const updateLinePosition = () => {
    const { width, left } = window.location.hash
      ? getBoundingClientByHash()
      : list_link[0].getBoundingClientRect();

    setStyleProperty(line, width, left);
    setStyleProperty(lineHover, width, left);
  };

  updateLinePosition()

  window.addEventListener("hashchange", updateLinePosition);

  window.addEventListener("resize", updateLinePosition);

  const list  = document.querySelector('.list') as HTMLElement

  window.addEventListener('scroll', () => {
    const scrollPosition = window.scrollY;
    if (scrollPosition > 10) {

      list.classList.add('active')
    } else {
      list.classList.remove('active')
    }
  })
</script>
